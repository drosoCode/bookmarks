// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bookmark.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const addBookmark = `-- name: AddBookmark :one
INSERT INTO bookmark (link, name, description, save, add_date, id_user)
VALUES ($1, '', '', $2, $3, $4)
RETURNING id
`

type AddBookmarkParams struct {
	Link    string `json:"link"`
	Save    bool   `json:"save"`
	AddDate int64  `json:"addDate"`
	IDUser  int64  `json:"idUser"`
}

func (q *Queries) AddBookmark(ctx context.Context, arg AddBookmarkParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addBookmark,
		arg.Link,
		arg.Save,
		arg.AddDate,
		arg.IDUser,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmark WHERE id = $1 AND id_user = $2
`

type DeleteBookmarkParams struct {
	ID     int64 `json:"id"`
	IDUser int64 `json:"idUser"`
}

func (q *Queries) DeleteBookmark(ctx context.Context, arg DeleteBookmarkParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, arg.ID, arg.IDUser)
	return err
}

const getBookmark = `-- name: GetBookmark :one
SELECT id,
    link,
    name,
    description,
    save,
    add_date,
    array_agg(id_tag)::bigint[] AS tags
FROM bookmark b JOIN tag_link t ON (b.id = t.id_bookmark)
WHERE id_user = $1
    AND id = $2
GROUP BY id
`

type GetBookmarkParams struct {
	IDUser int64 `json:"idUser"`
	ID     int64 `json:"id"`
}

type GetBookmarkRow struct {
	ID          int64   `json:"id"`
	Link        string  `json:"link"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Save        bool    `json:"save"`
	AddDate     int64   `json:"addDate"`
	Tags        []int64 `json:"tags"`
}

func (q *Queries) GetBookmark(ctx context.Context, arg GetBookmarkParams) (GetBookmarkRow, error) {
	row := q.db.QueryRowContext(ctx, getBookmark, arg.IDUser, arg.ID)
	var i GetBookmarkRow
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Name,
		&i.Description,
		&i.Save,
		&i.AddDate,
		pq.Array(&i.Tags),
	)
	return i, err
}

const listBookmarks = `-- name: ListBookmarks :many
SELECT id,
    link,
    name,
    description,
    save,
    add_date,
    array_agg(id_tag)::bigint[] AS tags
FROM bookmark b JOIN tag_link t ON (b.id = t.id_bookmark)
WHERE id_user = $1
GROUP BY id
`

type ListBookmarksRow struct {
	ID          int64   `json:"id"`
	Link        string  `json:"link"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Save        bool    `json:"save"`
	AddDate     int64   `json:"addDate"`
	Tags        []int64 `json:"tags"`
}

func (q *Queries) ListBookmarks(ctx context.Context, idUser int64) ([]ListBookmarksRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookmarks, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookmarksRow
	for rows.Next() {
		var i ListBookmarksRow
		if err := rows.Scan(
			&i.ID,
			&i.Link,
			&i.Name,
			&i.Description,
			&i.Save,
			&i.AddDate,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBookmarkData = `-- name: SetBookmarkData :exec
UPDATE bookmark
SET name = $1, description = $2
WHERE id = $3
`

type SetBookmarkDataParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) SetBookmarkData(ctx context.Context, arg SetBookmarkDataParams) error {
	_, err := q.db.ExecContext(ctx, setBookmarkData, arg.Name, arg.Description, arg.ID)
	return err
}
