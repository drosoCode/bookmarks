// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: token.sql

package database

import (
	"context"
)

const addToken = `-- name: AddToken :one
INSERT INTO token ("name", add_date, "value", id_user)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type AddTokenParams struct {
	Name    string `json:"name"`
	AddDate int64  `json:"addDate"`
	Value   string `json:"value"`
	IDUser  int64  `json:"idUser"`
}

func (q *Queries) AddToken(ctx context.Context, arg AddTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addToken,
		arg.Name,
		arg.AddDate,
		arg.Value,
		arg.IDUser,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM token WHERE id = $1 AND id_user = $2
`

type DeleteTokenParams struct {
	ID     int64 `json:"id"`
	IDUser int64 `json:"idUser"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteToken, arg.ID, arg.IDUser)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, name, add_date, value, id_user FROM token WHERE id = $1 AND id_user = $2
`

type GetTokenParams struct {
	ID     int64 `json:"id"`
	IDUser int64 `json:"idUser"`
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.ID, arg.IDUser)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AddDate,
		&i.Value,
		&i.IDUser,
	)
	return i, err
}

const listTokenVals = `-- name: ListTokenVals :many
SELECT id_user, value FROM token
`

type ListTokenValsRow struct {
	IDUser int64  `json:"idUser"`
	Value  string `json:"value"`
}

func (q *Queries) ListTokenVals(ctx context.Context) ([]ListTokenValsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTokenVals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTokenValsRow
	for rows.Next() {
		var i ListTokenValsRow
		if err := rows.Scan(&i.IDUser, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, name, add_date
FROM token
WHERE id_user = $1
`

type ListTokensRow struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	AddDate int64  `json:"addDate"`
}

func (q *Queries) ListTokens(ctx context.Context, idUser int64) ([]ListTokensRow, error) {
	rows, err := q.db.QueryContext(ctx, listTokens, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTokensRow
	for rows.Next() {
		var i ListTokensRow
		if err := rows.Scan(&i.ID, &i.Name, &i.AddDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
