// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package database

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (username, name) VALUES ($1, $2) RETURNING id
`

type AddUserParams struct {
	Username string `json:"username"`
	Name     string `json:"name"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users WHERE username = $1
`

type GetUserRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
